from pathlib import Path

path = Path('js/uiController.js')
lines = path.read_text(encoding='utf-8').splitlines()

def find_index(pattern):
    for idx, line in enumerate(lines):
        if line.strip().startswith(pattern):
            return idx
    raise SystemExit(f"Pattern {pattern!r} not found")

def replace_block(start_pattern, end_pattern, new_block):
    start = find_index(start_pattern)
    end = find_index(end_pattern)
    lines[start:end] = new_block

replace_block('createContinentBlock(', 'createLocationEntry(', [
    "    createContinentBlock(continentName, locations) {",
    "        const wrapper = document.createElement('div');",
    "        wrapper.className = 'continent';",
    "        wrapper.dataset.continent = continentName;",
    "",
    "        const toggleButton = document.createElement('button');",
    "        toggleButton.className = 'continent-toggle';",
    "        toggleButton.innerHTML = continentName + ' <span class=\"location-count\">(' + locations.length + ')</span>';",
    "",
    "        const content = document.createElement('div');",
    "        content.className = 'continent-content';",
    "        content.style.display = 'none';",
    "",
    "        const continentInfo = {",
    "            name: continentName,",
    "            wrapper,",
    "            toggleButton,",
    "            content,",
    "            isOpen: false,",
    "            entries: [],",
    "            pagination: {",
    "                currentPage: this.preferences ? this.preferences.getPagination(continentName) : 0,",
    "                totalPages: 1",
    "            },",
    "            paginationControls: null,",
    "        };",
    "",
    "        toggleButton.addEventListener('click', () => {",
    "            continentInfo.isOpen = !continentInfo.isOpen;",
    "            content.style.display = continentInfo.isOpen ? 'block' : 'none';",
    "        });",
    "",
    "        locations.forEach(location => {",
    "            const entry = this.createLocationEntry(location, continentInfo);",
    "            content.appendChild(entry.element);",
    "            this.entries.push(entry);",
    "        });",
    "",
    "        continentInfo.paginationControls = this.createPaginationControls(continentInfo);",
    "        if (continentInfo.paginationControls) {",
    "            continentInfo.paginationControls.container.style.display = 'none';",
    "            content.appendChild(continentInfo.paginationControls.container);",
    "        }",
    "",
    "        wrapper.appendChild(toggleButton);",
    "        wrapper.appendChild(content);",
    "        return continentInfo;",
    "    }",
    ""
])

replace_block('createLocationEntry(', 'bindFilters(', [
    "    createLocationEntry(location, continentInfo) {",
    "        const element = document.createElement('div');",
    "        element.className = 'location';",
    "        element.dataset.name = location.name;",
    "        element.dataset.continent = continentInfo.name;",
    "        element.dataset.type = location.type;",
    "        element.textContent = location.name;",
    "",
    "        const uiEntry = {",
    "            location,",
    "            continent: continentInfo.name,",
    "            element,",
    "            mapEntry: null,",
    "            matchesFilters: true,",
    "            continentInfo,
    "        };",
    "",
    "        uiEntry.mapEntry = this.mapController.createEntry({",
    "            location,",
    "            continent: continentInfo.name,",
    "            onSelect: () => this.selectLocation(uiEntry),",
    "            onHover: () => element.classList.add('hover'),",
    "            onLeave: () => {",
    "                if (!element.classList.contains('active')) {",
    "                    element.classList.remove('hover');",
    "                }",
    "            },",
    "        });",
    "",
    "        element.addEventListener('click', () => this.selectLocation(uiEntry));",
    "        element.addEventListener('mouseenter', () => {",
    "            element.classList.add('hover');",
    "            this.mapController.previewEntry(uiEntry.mapEntry, true);",
    "        });",
    "        element.addEventListener('mouseleave', () => {",
    "            if (!element.classList.contains('active')) {",
    "                element.classList.remove('hover');",
    "                this.mapController.previewEntry(uiEntry.mapEntry, false);",
    "            }",
    "        });",
    "",
    "        continentInfo.entries.push(uiEntry);",
    "",
    "        return uiEntry;",
    "    }",
    ""
])

insert_index = find_index('bindFilters(')
new_methods = [
    "    createPaginationControls(continentInfo) {",
    "        if (!continentInfo) {",
    "            return null;",
    "        }",
    "",
    "        const container = document.createElement('div');",
    "        container.className = 'pagination-controls';",
    "",
    "        const prevButton = document.createElement('button');",
    "        prevButton.type = 'button';",
    "        prevButton.className = 'pagination-prev';",
    "        prevButton.textContent = '‹';",
    "",
    "        const infoLabel = document.createElement('span');",
    "        infoLabel.className = 'pagination-info';",
    "",
    "        const nextButton = document.createElement('button');",
    "        nextButton.type = 'button';",
    "        nextButton.className = 'pagination-next';",
    "        nextButton.textContent = '›';",
    "",
    "        prevButton.addEventListener('click', () => this.changeContinentPage(continentInfo, -1));",
    "        nextButton.addEventListener('click', () => this.changeContinentPage(continentInfo, 1));",
    "",
    "        container.append(prevButton, infoLabel, nextButton);",
    "",
    "        return {",
    "            container: container,",
    "            prevButton: prevButton,",
    "            nextButton: nextButton,",
    "            infoLabel: infoLabel,",
    "        };",
    "    }",
    "",
    "    changeContinentPage(continentInfo, step) {",
    "        if (!continentInfo || !continentInfo.pagination) {",
    "            return;",
    "        }",
    "        const totalPages = Math.max(1, continentInfo.pagination.totalPages || 1);",
    "        const nextPage = Math.min(totalPages - 1, Math.max(0, (continentInfo.pagination.currentPage || 0) + step));",
    "        if (nextPage === continentInfo.pagination.currentPage) {",
    "            return;",
    "        }",
    "        continentInfo.pagination.currentPage = nextPage;",
    "        if (this.preferences) {",
    "            this.preferences.setPagination(continentInfo.name, nextPage);",
    "        }",
    "        this.updateContinentDisplay(continentInfo, false);",
    "    }",
    "",
    "    updatePaginationControls(continentInfo) {",
    "        const controls = continentInfo.paginationControls;",
    "        if (!controls) {",
    "            return;",
    "        }",
    "        const totalPages = Math.max(1, continentInfo.pagination.totalPages || 1);",
    "        const currentPage = Math.max(0, Math.min(totalPages - 1, continentInfo.pagination.currentPage || 0));",
    "        if (this.filtersActive || totalPages <= 1) {",
    "            controls.container.style.display = 'none';",
    "            return;",
    "        }",
    "        controls.container.style.display = 'flex';",
    "        controls.infoLabel.textContent = 'Page ' + (currentPage + 1) + ' / ' + totalPages;",
    "        controls.prevButton.disabled = currentPage === 0;",
    "        controls.nextButton.disabled = currentPage >= totalPages - 1;",
    "    }",
    "",
    "    updateContinentDisplay(continentInfo, filtersActive) {",
    "        if (!continentInfo) {",
    "            return false;",
    "        }",
    "        const matchedEntries = continentInfo.entries.filter(entry => entry.matchesFilters);",
    "        const totalMatched = matchedEntries.length;",
    "        continentInfo.toggleButton.innerHTML = continentInfo.name + ' <span class=\"location-count\">(' + totalMatched + ')</span>';",
    "        if (totalMatched === 0) {",
    "            continentInfo.wrapper.style.display = 'none';",
    "            if (continentInfo.paginationControls) {",
    "                continentInfo.paginationControls.container.style.display = 'none';",
    "            }",
    "            continentInfo.entries.forEach(entry => {",
    "                entry.element.style.display = 'none';",
    "                this.mapController.setEntryVisibility(entry.mapEntry, false);",
    "            });",
    "            return false;",
    "        }",
    "",
    "        continentInfo.wrapper.style.display = 'block';",
    "",
    "        if (filtersActive) {",
    "            if (continentInfo.paginationControls) {",
    "                continentInfo.paginationControls.container.style.display = 'none';",
    "            }",
    "            continentInfo.entries.forEach(entry => {",
    "                const shouldDisplay = entry.matchesFilters;",
    "                entry.element.style.display = shouldDisplay ? 'block' : 'none';",
    "                this.mapController.setEntryVisibility(entry.mapEntry, shouldDisplay);",
    "            });",
    "        } else {",
    "            const totalPages = Math.max(1, Math.ceil(totalMatched / this.pageSize));",
    "            continentInfo.pagination.totalPages = totalPages;",
    "            if (continentInfo.pagination.currentPage >= totalPages) {",
    "                continentInfo.pagination.currentPage = totalPages - 1;",
    "            }",
    "            const start = continentInfo.pagination.currentPage * this.pageSize;",
    "            const end = start + this.pageSize;",
    "            const visibleSet = new Set(matchedEntries.slice(start, end));",
    "            continentInfo.entries.forEach(entry => {",
    "                const shouldDisplay = entry.matchesFilters && visibleSet.has(entry);",
    "                entry.element.style.display = shouldDisplay ? 'block' : 'none';",
    "                this.mapController.setEntryVisibility(entry.mapEntry, shouldDisplay);",
    "            });",
    "            this.updatePaginationControls(continentInfo);",
    "        }",
    "",
    "        return true;",
    "    }",
    "",
    "    ensureEntryPage(entry) {",
    "        if (!entry || !entry.continentInfo || this.filtersActive) {",
    "            return;",
    "        }",
    "        const continentInfo = entry.continentInfo;",
    "        const index = continentInfo.entries.indexOf(entry);",
    "        if (index === -1) {",
    "            return;",
    "        }",
    "        const targetPage = Math.floor(index / this.pageSize);",
    "        if (continentInfo.pagination.currentPage !== targetPage) {",
    "            continentInfo.pagination.currentPage = targetPage;",
    "            if (this.preferences) {",
    "                this.preferences.setPagination(continentInfo.name, targetPage);",
    "            }",
    "            this.updateContinentDisplay(continentInfo, false);",
    "        }",
    "    }",
    "",
    "    saveFilters() {",
    "        if (!this.preferences) {",
    "            return;",
    "        }",
    "        const text = this.searchBar ? this.searchBar.value : '';",
    "        const type = this.typeFilter ? this.typeFilter.value : 'all';",
    "        this.preferences.setFilters({ text, type });",
    "    }",
    ""
]
lines[insert_index:insert_index] = new_methods

replace_block('bindFilters(', 'bindHistoryControls(', [
    "    bindFilters() {",
    "        if (this.searchBar) {",
    "            this.searchBar.addEventListener('input', () => {",
    "                this.activeFilters.text = this.searchBar.value.trim().toLowerCase();",
    "                this.saveFilters();",
    "                this.applyFilters();",
    "            });",
    "        }",
    "",
    "        if (this.clearSearchButton) {",
    "            this.clearSearchButton.addEventListener('click', () => {",
    "                if (this.searchBar) {",
    "                    this.searchBar.value = '';",
    "                    this.searchBar.focus();",
    "                }",
    "                this.activeFilters.text = '';",
    "                this.saveFilters();",
    "                this.applyFilters();",
    "            });",
    "        }",
    "",
    "        if (this.typeFilter) {",
    "            this.typeFilter.addEventListener('change', () => {",
    "                this.activeFilters.type = this.typeFilter.value;",
    "                this.saveFilters();",
    "                this.applyFilters();",
    "            });",
    "        }",
    "",
    "        if (this.resetFiltersButton) {",
    "            this.resetFiltersButton.addEventListener('click', () => {",
    "                this.activeFilters = { text: '', type: 'all' };",
    "                if (this.searchBar) {",
    "                    this.searchBar.value = '';",
    "                }",
    "                if (this.typeFilter) {",
    "                    this.typeFilter.value = 'all';",
    "                }",
    "                this.saveFilters();",
    "                this.applyFilters();",
    "            });",
    "        }",
    "",
    "        if (this.clusteringToggle) {",
    "            this.clusteringToggle.addEventListener('change', () => {",
    "                const enabled = this.clusteringToggle.checked;",
    "                this.mapController.setClusteringEnabled(enabled);",
    "                if (this.preferences) {",
    "                    this.preferences.setClustering(enabled);",
    "                }",
    "            });",
    "        }",
    "    }",
    ""
])

replace_block('applyFilters(', 'closeInfoSidebar(', [
    "    applyFilters() {",
    "        const query = (this.activeFilters.text || '').toLowerCase();",
    "        const selectedType = this.activeFilters.type || 'all';",
    "        const hasQuery = query.length > 0;",
    "        const hasType = selectedType !== 'all';",
    "        const filtersActive = hasQuery || hasType;",
    "",
    "        this.filtersActive = filtersActive;",
    "",
    "        this.entries.forEach(entry => {",
    "            const matchesText = !hasQuery || entry.location.name.toLowerCase().includes(query);",
    "            const matchesType = !hasType || entry.location.type === selectedType;",
    "            entry.matchesFilters = matchesText && matchesType;",
    "        });",
    "",
    "        this.continents.forEach(continentInfo => {",
    "            this.updateContinentDisplay(continentInfo, filtersActive);",
    "        });",
    "    }",
    ""
])

path.write_text('\n'.join(lines) + '\n', encoding='utf-8')

