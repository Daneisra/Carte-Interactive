from pathlib import Path
path = Path("js/uiController.js")
text = path.read_text(encoding="utf-8")
old = "    initialize({ typeData, locationsData }) {\r\n        this.typeData = typeData || {};\r\n        this.mapController.setTypeData(this.typeData);\r\n\r\n        this.#populateTypeFilter();\r\n        this.#renderSidebar(locationsData || {});\r\n        this.#bindFilters();\r\n        this.#bindHistoryControls();\r\n        this.#bindInfoTabs();\r\n        this.#bindSidebarCloser();\r\n        this.#bindMapControls();\r\n        this.mapController.onZoomChange(percentage => this.#updateZoomDisplay(percentage));\r\n        this.#applyFilters();\r\n    }\r\n\r\n"\nnew = "    initialize({ typeData, locationsData }) {\r\n        this.ensureAudioElements();\r\n\r\n        this.typeData = typeData || {};\r\n        this.mapController.setTypeData(this.typeData);\r\n\r\n        const savedFilters = this.preferences ? this.preferences.getFilters() : null;\r\n        const initialFilters = savedFilters || { text: '', type: 'all' };\r\n        this.activeFilters.text = (initialFilters.text || '').trim().toLowerCase();\r\n        this.activeFilters.type = initialFilters.type || 'all';\r\n        if (this.searchBar) {\r\n            this.searchBar.value = initialFilters.text || '';\r\n        }\r\n\r\n        this.populateTypeFilter();\r\n        if (this.typeFilter) {\r\n            this.typeFilter.value = this.activeFilters.type || 'all';\r\n        }\r\n\r\n        const savedClustering = this.preferences ? this.preferences.getClustering() : false;\r\n        this.mapController.setClusteringEnabled(savedClustering);\r\n        if (this.clusteringToggle) {\r\n            this.clusteringToggle.checked = savedClustering;\r\n        }\r\n\r\n        const savedMapState = this.preferences ? this.preferences.getMapState() : null;\r\n        const savedLastLocation = this.preferences ? this.preferences.getLastLocation() : null;\r\n\r\n        this.renderSidebar(locationsData || {});\r\n        this.bindFilters();\r\n        this.bindHistoryControls();\r\n        this.bindInfoTabs();\r\n        this.bindSidebarCloser();\r\n        this.bindMapControls();\r\n\r\n        if (this.preferences) {\r\n            this.mapController.onMapStateChange(state => this.preferences.setMapState(state));\r\n        }\r\n        if (savedMapState) {\r\n            this.mapController.setMapState(savedMapState);\r\n        }\r\n\r\n        this.applyFilters();\r\n\r\n        if (savedLastLocation) {\r\n            const entry = this.entries.find(item => item.location.name === savedLastLocation);\r\n            if (entry) {\r\n                this.ensureEntryPage(entry);\r\n                this.selectLocation(entry);\r\n            }\r\n        }\r\n    }\r\n\r\n"
if old not in text:
    raise SystemExit('initialize block not found')
text = text.replace(old, new, 1)
path.write_text(text, encoding='utf-8')
